# FOCS Fall 2016 Homework 14

You may edit your answers into this file, or add a separate file in the same directory.

If you add a separate file, please include the following at the top.
In either case, add your name and check one of the boxes.

Student Name: Aidan McLaughlin
Check one:
[X] I completed this assignment without assistance or external resources.
[ ] I completed this assignment with assistance from ___
    and/or using these external resources: ___

I. Math

In the following problems, we will look at how rapidly different functions grow.  We are interested in figuring out when two functions grow at the same rate.  Our definition of “the same” is:  f(n) grows no faster than g(n) if there is some minimum value for the argument (we’ll call it n0) after which f(n) is no larger than a constant multiple of g(n) -- call it k*g(n).  For example, if f(n) is 367n+1098 and g(n) is 2n, n0 could be 40 and k could be 200:  367n+1098 <= 200*2n for n>40.

For each of the following pairs of functions, identify a multiplier and a minimum value of n for which the first is no larger than the specified multiple of the second.  If you cannot -- if there are no such values -- explain why not.


  A. 367n+1098     and     2n              [n0 = 40; k=200]
  B. n^2 + 2n + 6    and     6n^2 - 25     [n0 = 3; k = 1]
  C. n^3 + n^2 - 2n     and   6n^2 - 25    [n0 = ; k = ] None, n^3 ensures that, no matter how high you set k, you'll eventually reach an n value where (n+1)*n^2 > k*6*n^2. 25 will be negligible at high values of n.
  D. 869,438    and    923                 [n0 = 0; k = 942]
  E. 2^n    and    3^n                     [n0 = 1; k = 1]
  F. 3^n    and    2^n                     [n0 = ; k = ] None, 3^n will catch up to any amount of scaling used on the right function.
  G. log_2 n     and    log_10 n           [n0 = 0; k = 3.322 (or 4 if you want integers)]
  H. log_10 (n^2)    and     log_2 n         [n0 = 0; k = 1]


II. Linear data structures

For the following problem, assume that it costs 1 unit to access a structure -- an item in an array, a field in a record you are holding, the first element in a linked list -- whether reading or writing that element.  [Accessing the second element in a linked list costs 2 units if you have a pointer to the list:  1 unit to access the first element/read its “next” pointer, and another unit to access the second element.]

Assume that you have n elements stored in an array and the same n elements stored in a linked list; you have no other references to these data structures.  You may assume that n > 10.  How much does it cost to perform each of the following actions?

For all of these I'm assuming we don't expend a unit to create elements

  A. Read the value of the first element in the array?  In the list? 1, 1
  B. Read the value of the seventh element in the array?  In the list? 1, 7
  C. Add an element to the array?  [Where is the cheapest place to add it?]  To the list?  [Where is the cheapest place to add it?] n+1 [end], n+1 [the end, you find the first empty "next" reference and add your new elem's reference to it]
  D. Delete the fifth element from the array?  From the list? 1, 10 or 15? [Assuming you can somehow store information, which the wording in the following question "one extra piece of storage" I figure there's at least one, it'd be 6 to get the pointer reference for 6, 5 to delete 5 if one needs to delete it explicitly, and 4 to rewrite 4's "next" pointer.]
  E. Confirm that a particular element -- say x -- is present in the array?  In the list? pos(x) or n, 2pos(x) or 2n
  F. Confirm that a particular element -- say y -- is NOT present in the array?  In the list? pos(y) or n, 2pos(y) or 2n
  
  For E & F I may be missing the point but you have the same end scenario in that finding an instance of the element in question ends the search, thus for a list it must check each index and either end early at the position of the element or go through everything. This is double for the linked since you're checking each value as you go.

Now assume that you can maintain one extra piece of storage for the data structure.  In the case of the array, you may want to maintain a length reference.
In the case of the linked list, what would be similarly helpful?
G. How much would it cost now to add an element to the end of the array?  To add an element to the end of the list? 1, 2 [assuming you hold the last added pointer reference you could access it directly and then add the pointer reference of your new elem]
H. How much would it cost now to delete an element from the array?  From the list?  What if it were the final element?  The penultimate element? 1, pos(e) | 1, 1 | 1, n (n - 1 to read each "next" reference and see if it matches stored final elem, 1 to delete)

Finally, assume that both the array and the linked list are sorted, i.e., that their elements are in some predictable order (say, comparable by < or <=).
  J. How much would it cost to confirm that a particular element -- say x -- is present in the array?  In the list?  To confirm that a particular element -- say y -- is not present in the array?  In the list? pos(e) or n, 2pos(e) or 2n [assuming there's a value e that's either equal or equivalent to a match in that it determines x is either not in the array or that y is, traversing up to that position is all that's necessary and is likely to be a lower number than n]
  
This hw has a whole lot of assumptions and I can't speak to whether they're sound or not. I looked around for evidence of a reading assignment that was supposed to go along with this and found none (certainly could have missed it though).
